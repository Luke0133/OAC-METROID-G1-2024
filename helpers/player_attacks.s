.text
# ----> Summary: player_attacks.s stores attacks generated by player procedures
# 1 - BEAM SPAWN (Checks enemies in current map and renders/moves them)
# 2 - BOMB SPAWN
#
# 4 - BEAMS OPERATIONS 
# 5 - BOMBS OPERATIONS 
# 
# 7 - EXPLOSION SPAWN
# 8 - EXPLOSION OPERATIONS
#

###################        BEAM SPAWN        ####################
#      Spawns a beam if available, otherwise end procedure      #
#                    (It takes no arguments)                    #
#                                                               #
#  ----------            registers used             ----------  #
#    a0 = BEAMS_ARRAY address                                   #
#    a1 = PLYR_POS address                                      #
#    a2 = Number of beams                                       #
#    a3 = Loop counter                                          #
#                                                               #
#  ----------         temporary registers           ----------  #
#    t0 --> temporary register                                  #
#                                                               #    
#################################################################

BEAM_SPAWN:
    la a0, BEAMS_ARRAY      # Loads BEAMS array
    lbu t0,0(a0)            # Loads cooldown byte
    beqz t0,CONTINUE_BEAM_SPAWN # If on zero, spawn
        j END_BEAM_SPAWN_LOOP
    CONTINUE_BEAM_SPAWN:
    la a1, PLYR_POS         # Loads Player Pos address
    li a2, beams_number     # Loads total number of beams
    li a3,0                 # Resets counter

    addi a0,a0,1            # Skips cooldown byte
    BEAM_SPAWN_LOOP:
        lbu t0, 0(a0)       # Loads enable byte
        beqz t0, BEAM_SPAWN_LOOP_ACTIVATE # If current beam is disabled, activate it
            j NEXT_IN_BEAM_SPAWN_LOOP     # Otherwise, go to next one in loop

        BEAM_SPAWN_LOOP_ACTIVATE:
            # Setting attack cooldown
            la t0, BEAMS_ARRAY            # Loads BEAMS array
            li t1, beams_attack_cooldown  # gets cooldown value
            sb t1,0(t0)                   # stores it

            # Storing offset (the beam's offset will be the same as the player's)
            lbu t0, 6(a1)    # Loads player's X offset
            sb t0, 3(a0)     # and stores it on beam's X offset

            lbu t0, 7(a1)    # Loads player's Y offset
            sb t0, 4(a0)     # and stores it on beam's Y offset

            li t0,1          # Loads 1 (Enabled) 
            sb t0,0(a0)      # stores in beam's enable byte

            # Checking vertical direction player is facing
            lbu t0, 14(a1)   # Loads vertical direction
            beqz t0, BEAM_SPAWN_LOOP_ACTIVATE_CHECK_X_AXIS # If looking foward
            # Otherwise, player is looking up --> spawn beam above player
                # X is the same as the player
                lbu t0, 8(a1)    # Loads player's X
                sb t0, 5(a0)     # and stores it on beam's X
                sb t0, 6(a0)     # and on beam's old X

                # Y is one tile up from player
                lbu t0, 10(a1)   # Loads player's Y
                addi t0,t0,-1    # goes up 1 tile
                sb t0, 7(a0)     # and stores it on beam's Y
                sb t0, 8(a0)     # and on beam's old Y

                # Getting direction of beam
                li t0,0          # Loads 0 (Up)
                sb t0,1(a0)      # and stores it on the direction byte
                j END_BEAM_SPAWN_LOOP # break loop

            BEAM_SPAWN_LOOP_ACTIVATE_CHECK_X_AXIS:
            # If player is looking foward --> check horizontal direction
            lbu t0, 13(a1)   # Loads horizontal direction
            bnez t0,BEAM_SPAWN_LOOP_ACTIVATE_LEFT_AXIS   # If player is looking left
            # Otherwise, they're facing right
                # X is one tile to the right of player
                lbu t0, 8(a1)    # Loads player's X
                addi t0,t0,1     # goes 1 tile to the right
                sb t0, 5(a0)     # and stores it on beam's X
                sb t0, 6(a0)     # and on beam's old X

                # Y is the same as the player
                lbu t0, 10(a1)   # Loads player's Y
                sb t0, 7(a0)     # and stores it on beam's Y
                sb t0, 8(a0)     # and on beam's old Y

                # Getting direction of beam
                li t0,1          # Loads 1 (Right)
                sb t0,1(a0)      # and stores it on the direction byte
                j END_BEAM_SPAWN_LOOP # break loop

            BEAM_SPAWN_LOOP_ACTIVATE_LEFT_AXIS: 
            # If player is looking left
                # X is one tile to the left of player
                lbu t0, 8(a1)    # Loads player's X
                addi t0,t0,-1    # goes 1 tile to the left
                sb t0, 5(a0)     # and stores it on beam's X
                sb t0, 6(a0)     # and on beam's old X

                # Y is the same as the player
                lbu t0, 10(a1)   # Loads player's Y
                sb t0, 7(a0)     # and stores it on beam's Y
                sb t0, 8(a0)     # and on beam's old Y

                # Getting direction of beam
                li t0,-1         # Loads -1 (Left)
                sb t0,1(a0)      # and stores it on the direction byte
                j END_BEAM_SPAWN_LOOP # break loop

        NEXT_IN_BEAM_SPAWN_LOOP:
            addi a0,a0,beams_size          # Going to the next beams address                                  
            addi a3,a3,1                   # Iterating counter by 1                                   
            bge a3,a2, END_BEAM_SPAWN_LOOP # If all of the beams were checked, end loop (don't attack)                                
            j BEAM_SPAWN_LOOP # otherwise, go back to the loop's beginning 

    END_BEAM_SPAWN_LOOP:
    # Procedure finished, return
        ret

###################        BOMB SPAWN        ####################
#      Spawns a bomb if available, otherwise end procedure      #
#                    (It takes no arguments)                    #
#                                                               #
#  ----------            registers used             ----------  #
#    a0 = BOMBS_ARRAY address                                   #
#    a1 = PLYR_POS address                                      #
#    a2 = Number of bombs                                       #
#    a3 = Loop counter                                          #
#                                                               #
#  ----------         temporary registers           ----------  #
#    t0 --> temporary register                                  #
#                                                               #    
#################################################################

BOMB_SPAWN:
    la a0, BOMBS_ARRAY      # Loads BOMBS array
    lbu t0,0(a0)            # Loads cooldown byte
    beqz t0,CONTINUE_BOMB_SPAWN # If on zero, spawn
        j END_BOMB_SPAWN_LOOP
    CONTINUE_BOMB_SPAWN:
    la a1, PLYR_POS         # Loads Player Pos address
    li a2, bombs_number     # Loads total number of bombs
    li a3,0                 # Resets counter

    addi a0,a0,1            # Skips cooldown byte
    BOMB_SPAWN_LOOP:
        lbu t0, 0(a0)       # Loads enable byte
        beqz t0, BOMB_SPAWN_LOOP_ACTIVATE # If current bomb is disabled, activate it
            j NEXT_IN_BOMB_SPAWN_LOOP     # Otherwise, go to next one in loop

        BOMB_SPAWN_LOOP_ACTIVATE:
            # Setting attack cooldown
            la t0, BOMBS_ARRAY            # Loads BOMBS array
            li t1, bombs_attack_cooldown  # gets cooldown value
            sb t1,0(t0)                   # stores it

            li t0,1          # Loads 1 (Enabled) 
            sb t0,0(a0)      # stores in beam's enable byte

            # Storing offset (the bomb's offset will be the same as the player's)
            lbu t0, 6(a1)    # Loads player's X offset
            sb t0, 3(a0)     # and stores it on bomb's X offset

            lbu t0, 7(a1)    # Loads player's Y offset
            sb t0, 4(a0)     # and stores it on bomb's Y offset

            # X is the same as the player
            lbu t0, 8(a1)    # Loads player's X
            sb t0, 5(a0)     # and stores it on bomb's X
            sb t0, 6(a0)     # and on bomb's old X

            # Y is one tile bellow Player's Y (will be on the same Y as the player in morph ball)
            lbu t0, 10(a1)   # Loads player's Y
            addi t0,t0,1     # goes down 1 tile
            sb t0, 7(a0)     # and stores it on bomb's Y
            sb t0, 8(a0)     # and on bomb's old Y

            # Checking which Bomb we are moving
            bnez a3,BOMB_SPAWN_LOOP_NOT_BOMB_0
            #    fs10 = BOMB_0's Y speed  
                fcvt.s.w fs10,zero # Resets Bomb's jump speed
                j END_BOMB_SPAWN_LOOP # break loop   

            BOMB_SPAWN_LOOP_NOT_BOMB_0: li t0,1
            bne a3,t0,BOMB_SPAWN_LOOP_NOT_BOMB_1
            #    fs11 = BOMB_1's Y speed 
                fcvt.s.w fs11,zero # Resets Bomb's jump speed
                j END_BOMB_SPAWN_LOOP # break loop   

            BOMB_SPAWN_LOOP_NOT_BOMB_1: # li t0,2
            #    fa7 = BOMB_2's Y speed 
                fcvt.s.w fa7,zero # Resets Bomb's jump speed
                # j END_BOMB_SPAWN_LOOP # break loop              

        NEXT_IN_BOMB_SPAWN_LOOP:
            addi a0,a0,bombs_size          # Going to the next bombs address                                  
            addi a3,a3,1                   # Iterating counter by 1                                   
            bge a3,a2, END_BOMB_SPAWN_LOOP # If all of the bombs were checked, end loop (don't attack)                                
            j BOMB_SPAWN_LOOP # otherwise, go back to the loop's beginning 

    END_BOMB_SPAWN_LOOP:
    # Procedure finished, return
        ret

##############        BEAMS OPERATIONS        ##############
#           Renders enabled beams and moves them           #
#                                                          #		
#  ------------        registers used        ------------  #
#    a0 = BEAMS ARRAY address                              #
#    a1 = Number of beams in current map                   #
#    a2 = Loop counter                                     #
#    tp = CURRENT_MAP's address                            #
#    t0 -- t6 = Temporary Registers                        #
#    a0 -- a7 => used as arguments                         #
#                                                          #
############################################################


BEAMS_OPERATIONS:
# Storing Registers on Stack
    addi sp,sp,-4
    sw ra,0(sp)
# End of Stack Operations
    la tp, CURRENT_MAP  # Loads CURRENT_MAP address

    la a0,BEAMS_ARRAY   # Loads Beams array
    addi a0,a0,1        # skips cooldown byte

    li a2,0             # resets counter
    li a1,beams_number  # gets number of beams in game
    BEAMS_OPERATIONS_LOOP:
        li a6,0      # Default sprite (normal beam, and not exploding)
        lbu t2,0(a0) # Loads enable byte
        bnez t2,BEAMS_OPERATIONS_LOOP_CONTINUE    # If enabled,
            j NEXT_IN_BEAMS_OPERATIONS_LOOP       # Otherwise, check other beams
        BEAMS_OPERATIONS_LOOP_CONTINUE:  
            li t0,2  # Loads "To be Disabled" 
            bne t0,t2, BEAMS_OPERATIONS_LOOP_CONTINUE_2 # If state isn't "To be Disabled" 
            # Otherwise, beam was set to be disabled
                sb zero,0(a0) # Disables beam
                j NEXT_IN_BEAMS_OPERATIONS_LOOP  # Check other beams

        BEAMS_OPERATIONS_LOOP_CONTINUE_2:    
            li t0,3  # Loads "Hit, to be Disabled" 
            bne t0,t2, BEAMS_OPERATIONS_LOOP_CONTINUE_3   # If beam is trully enabled,
            # Otherwise, beam was set to be disabled from a hit
                li a6,1       # Beam will be rendered again, but exploding 
                # j BEAMS_OPERATIONS_LOOP_CONTINUE_3  # Only render, don't move it
            
        BEAMS_OPERATIONS_LOOP_CONTINUE_3:
        # If procedure arrived here, move current beam and render it
        # Storing Registers on Stack
            addi sp,sp,-36
            sw s1,0(sp)
            sw s2,4(sp)
            sw s3,8(sp)
            sw s4,12(sp)
            sw a0,16(sp)
            sw a1,20(sp)
            sw a2,24(sp)
            sw a3,28(sp)
            sw tp,32(sp)
        # End of Stack Operations           
            
            # Starting rendering procedure:
            # Calculating Beam's X related to screen (may be negative, but this will be fixed in RENDER_ENTITY)
            lbu a1,5(a0) # Loads beam's current X
            lbu t0,6(tp) # Loads map's current X
            sub a1,a1,t0 # Gets the X matrix related to the map's X (a1 = beam's X - map's X)
            slli a1,a1,tile_size_shift # Multiplies a5 by 16 in order to get X related to screen
            lbu t0,3(a0) # Loads beam's X offset
            add a1,a1,t0 # Adds offset to position
            lbu t0,8(tp) # Loads map's X offset
            sub a1,a1,t0 # and takes it from beam's position
# dislocation?
            
            # Calculating Beam's Y related to screen (may be negative, but this will be fixed in RENDER_ENTITY)
            lbu a2,7(a0) # Loads beam's current Y
            lbu t1,7(tp) # Loads map's current Y
            sub a2,a2,t1 # Gets the Y matrix related to the map's Y (a2 = beam's Y - map's Y)
            slli a2,a2,tile_size_shift # Multiplies a2 by 16 in order to get Y related to screen
            lbu t0,4(a0) # Loads beam's Y offset
            add a2,a2,t0 # Adds offset to position
            lbu t1,9(tp) # Loads map's Y offset
            sub a2,a2,t1 # and takes it from beam's position
            
            li a3,tile_size   # 16 = width of rendering area
            li a4,tile_size   # 16 = height of rendering area
            mv a5,s0          # gets frame to be rendered on

            lb t0,1(a0)       # Loads direction byte
            beqz t0,BEAMS_OPERATIONS_LOOP_RENDER_UP   # If beam is going up
                la a0,Beam_Horizontal   # If beam is moving horizontally
                j BEAMS_OPERATIONS_LOOP_RENDER_START  # Render

            BEAMS_OPERATIONS_LOOP_RENDER_UP:
                la a0,Beam_Vertical     # If beam is moving vertically
                # j BEAMS_OPERATIONS_LOOP_RENDER_START  # Render

            BEAMS_OPERATIONS_LOOP_RENDER_START:
                li a7,0             # Normal render
                call RENDER_ENTITY  # Renders it

            lw a0,16(sp)    # Restores a0
            lbu t2,0(a0)    # Loads enable byte
            li t0,3         # Loads "Hit, to be Disabled" 
            bne t0,t2, BEAMS_OPERATIONS_LOOP_MOVE   # If it wasn't in the "Hit" state
            # Otherwise, beam was set to be disabled from a hit
                sb zero,0(a0) # Disables beam
                j BEAMS_OPERATIONS_LOOP_AFTER_OPERATIONS  # Check other beams

            BEAMS_OPERATIONS_LOOP_MOVE:
            # Moving beam
            # a0 is already set
            lw a1,0(tp)
            call MOVE_BEAM               
            
            BEAMS_OPERATIONS_LOOP_AFTER_MOVE:

            lbu t0,2(a0)    # Gets number of times that it was rendered
            addi t0,t0,1    # iterates it
            sb t0,2(a0)     # and stores it back
            li t1,beams_disable_threshold  # Loads number of times beam should render/move before being disabled
            blt t0,t1,BEAMS_OPERATIONS_LOOP_AFTER_OPERATIONS  # If it didn't surpass the threshold, finish this part of loop
            # Otherwise, set it to be disabled
                li t1,2        # Loads "To be Disabled" 
                sb t1,0(a0)    # and stores it on enable byte
                sb zero,2(a0)  # Resets render counter
                # This loop will continue normally and even the collision will work. Only
                # when arriving on the next loop's BEAMS_OPERATIONS will it be disabled
                # j BEAMS_OPERATIONS_LOOP_AFTER_OPERATIONS
            
        BEAMS_OPERATIONS_LOOP_AFTER_OPERATIONS:
        # Procedure finished: Loading Registers from Stack
            lw s1,0(sp)
            lw s2,4(sp)
            lw s3,8(sp)
            lw s4,12(sp)
            lw a0,16(sp)
            lw a1,20(sp)
            lw a2,24(sp)
            lw a3,28(sp)
            lw tp,32(sp)
            addi sp,sp,36
        # End of Stack Operations

        NEXT_IN_BEAMS_OPERATIONS_LOOP:                    
            addi a0,a0,beams_size  # Going to the next beam's address                                  
            addi a2,a2,1            # Iterating counter by 1                                   
            bge a2,a1, END_BEAMS_OPERATIONS_LOOP # If all of the beams were checked, end loop (don't attack)                                
            j BEAMS_OPERATIONS_LOOP # otherwise, go back to the loop's beginning 

    END_BEAMS_OPERATIONS_LOOP:
    # Procedure finished: Loading Registers from Stack
        lw ra,0(sp)
        addi sp,sp,4
    # End of Stack Operations   
        ret

##############        BOMBS OPERATIONS        ##############
#           Renders enabled bombs and moves them           #
#                                                          #		
#  ------------        registers used        ------------  #
#    a0 = BOMBS ARRAY address                              #
#    a1 = Number of bombs in current map                   #
#    a2 = Loop counter                                     #
#    tp = CURRENT_MAP's address                            #
#    t0 -- t6 = Temporary Registers                        #
#    a0 -- a7 => used as arguments                         #
#                                                          #
############################################################

BOMBS_OPERATIONS:
# Storing Registers on Stack
    addi sp,sp,-4
    sw ra,0(sp)
# End of Stack Operations
    la tp, CURRENT_MAP  # Loads CURRENT_MAP address

    la a0,BOMBS_ARRAY   # Loads Bombs array
    addi a0,a0,1        # skips cooldown byte

    li a2,0             # resets counter
    li a1,bombs_number  # gets number of bombs in game
    BOMBS_OPERATIONS_LOOP:
        lbu t2,0(a0) # Loads enable byte
        bnez t2,BOMBS_OPERATIONS_LOOP_CONTINUE    # If enabled,
            j NEXT_IN_BOMBS_OPERATIONS_LOOP       # Otherwise, check other bombs

        BOMBS_OPERATIONS_LOOP_CONTINUE:  
            li t0,2  # Loads "To be Disabled" 
            bne t0,t2, BOMBS_OPERATIONS_LOOP_CONTINUE_2 # If state isn't "To be Disabled" 
            # Otherwise, bomb was set to be disabled
                sb zero,0(a0) # Disables bomb

            # Storing Registers on Stack
                addi sp,sp,-20
                sw a0,0(sp)
                sw a1,4(sp)
                sw a2,8(sp)
                sw a3,12(sp)
                sw tp,16(sp)
            # End of Stack Operations  
                
                lbu a1,3(a0) # Loads bomb's X offset
                lbu a2,4(a0) # Loads bomb's Y offset
                lbu a3,5(a0) # Loads bomb's current X
                lbu a4,7(a0) # Loads bomb's current Y
                li a5,0      # No delay
            
                li a0, 1   # 1 - Big  
                call EXPLOSION_SPAWN

                lw a0,0(sp)  # Restores a0 for bomb collision
                call BOMB_COLLISION  # Will see if bomb hit an enemy/block
            # Procedure finished: Loading Registers from Stack
                lw a0,0(sp)
                lw a1,4(sp)
                lw a2,8(sp)
                lw a3,12(sp)
                lw tp,16(sp)
                addi sp,sp,20
            # End of Stack Operations
                
                j NEXT_IN_BOMBS_OPERATIONS_LOOP  # Check other bombs

        BOMBS_OPERATIONS_LOOP_CONTINUE_2:
        # If procedure arrived here, move current bomb and render it
        # Storing Registers on Stack
            addi sp,sp,-36
            sw s1,0(sp)
            sw s2,4(sp)
            sw s3,8(sp)
            sw s4,12(sp)
            sw a0,16(sp)
            sw a1,20(sp)
            sw a2,24(sp)
            sw a3,28(sp)
            sw tp,32(sp)
        # End of Stack Operations           
            
            # Checking which bomb we are moving
            bnez a2,BOMBS_OPERATIONS_LOOP_NOT_BOMB_0
            #    fs10 = BOMB_0's Y speed  
                fmv.s fa0,fs10   # Moves BOMB_0's current Y speed to fa0 
                j BOMBS_OPERATIONS_LOOP_MOVE  # Move

            BOMBS_OPERATIONS_LOOP_NOT_BOMB_0: li t0,1
            bne a2,t0,BOMBS_OPERATIONS_LOOP_NOT_BOMB_1
            #    fs11 = BOMB_1's Y speed 
                fmv.s fa0,fs11   # Moves BOMB_1's current Y speed to fa0
                j BOMBS_OPERATIONS_LOOP_MOVE  # Move

            BOMBS_OPERATIONS_LOOP_NOT_BOMB_1: # li t0,2
            #    fa7 = BOMB_2's Y speed 
                fmv.s fa0,fa7   # Moves BOMB_2's current Y speed to fa0
                # j BOMBS_OPERATIONS_LOOP_MOVE  # Move
            
            BOMBS_OPERATIONS_LOOP_MOVE:
            # Proper movement check
            # a0 is already set
            lw a1,0(tp)
            call MOVE_BOMB
            
            lw a2,24(sp) # Getting Bomb's number back (counter)
            
            # Checking which bomb we have moved (returning fa0 to its speed)
            bnez a2,BOMBS_OPERATIONS_AFTER_CHECK_NOT_BOMB_0
            #    fs10 = BOMB_0's Y speed  
                fmv.s fs10,fa0   # Saves BOMB_0's new Y speed from fa0 
                j BOMBS_OPERATIONS_AFTER_CHECK  # Finish move

            BOMBS_OPERATIONS_AFTER_CHECK_NOT_BOMB_0: li t0,1
            bne a2,t0,BOMBS_OPERATIONS_AFTER_CHECK_NOT_BOMB_1
            #    fs11 = BOMB_1's Y speed 
                fmv.s fs11,fa0   # Saves BOMB_1's new Y speed from fa0 
                j BOMBS_OPERATIONS_AFTER_CHECK  # Finish move

            BOMBS_OPERATIONS_AFTER_CHECK_NOT_BOMB_1: #li t0,2
            #    fa7 = BOMB_2's Y speed 
                fmv.s fa7,fa0   # Saves BOMB_2's new Y speed from fa0 
                # j BOMBS_OPERATIONS_AFTER_CHECK  # Finish move

            BOMBS_OPERATIONS_AFTER_CHECK:

            lw a0,16(sp)    # Restores a0
            lw tp,32(sp)    # Restores tp

            # Starting rendering procedure:
            # Calculating Bomb's X related to screen (may be negative, but this will be fixed in RENDER_ENTITY)
            lbu a1,5(a0) # Loads bomb's current X
            lbu t0,6(tp) # Loads map's current X
            sub a1,a1,t0 # Gets the X matrix related to the map's X (a1 = bomb's X - map's X)
            slli a1,a1,tile_size_shift # Multiplies a5 by 16 in order to get X related to screen
            lbu t0,3(a0) # Loads bomb's X offset
            add a1,a1,t0 # Adds offset to position
            lbu t0,8(tp) # Loads map's X offset
            sub a1,a1,t0 # and takes it from bomb's position
# dislocation?
            
            # Calculating Bomb's Y related to screen (may be negative, but this will be fixed in RENDER_ENTITY)
            lbu a2,7(a0) # Loads bomb's current Y
            lbu t1,7(tp) # Loads map's current Y
            sub a2,a2,t1 # Gets the Y matrix related to the map's Y (a2 = bomb's Y - map's Y)
            slli a2,a2,tile_size_shift # Multiplies a2 by 16 in order to get Y related to screen
            lbu t0,4(a0) # Loads bomb's Y offset
            add a2,a2,t0 # Adds offset to position
            lbu t1,9(tp) # Loads map's Y offset
            sub a2,a2,t1 # and takes it from bomb's position
            addi a2,a2,4 # Offsets sprite a little bit
            
            li a3,tile_size   # 16 = width of rendering area
            li a4,tile_size   # 16 = height of rendering area
            mv a5,s0          # gets frame to be rendered on

            lb a6,1(a0)       # Loads status byte
            xori a6,a6,1      # Inverts it
            sb a6,1(a0)       # and stores it
            
            la a0,Bomb   
            li a7,0             # Normal render
            call RENDER_ENTITY  # Renders it

            
            lw a0,16(sp)    # Restores a0
            lbu t0,2(a0)    # Gets number of times that it was rendered (counter for exploding)
            addi t0,t0,1    # iterates it
            sb t0,2(a0)     # and stores it back
            li t1,bombs_explosion_countdown  # Loads number of times bomb should render/move before being disabled
            blt t0,t1,BOMBS_OPERATIONS_LOOP_AFTER_OPERATIONS  # If it didn't surpass the threshold, finish this part of loop
            # Otherwise, set it to be disabled
                li t1,2        # Loads "To be Disabled" 
                sb t1,0(a0)    # and stores it on enable byte
                sb zero,1(a0)  # Sets status to 0
                sb zero,2(a0)  # Resets render counter
                # This loop will continue normally and even the collision will work. Only
                # when arriving on the next loop's BOMBS_OPERATIONS will it be disabled
                # j BOMBS_OPERATIONS_LOOP_AFTER_OPERATIONS
            
        BOMBS_OPERATIONS_LOOP_AFTER_OPERATIONS:
        # Procedure finished: Loading Registers from Stack
            lw s1,0(sp)
            lw s2,4(sp)
            lw s3,8(sp)
            lw s4,12(sp)
            lw a0,16(sp)
            lw a1,20(sp)
            lw a2,24(sp)
            lw a3,28(sp)
            lw tp,32(sp)
            addi sp,sp,36
        # End of Stack Operations

        NEXT_IN_BOMBS_OPERATIONS_LOOP:                    
            addi a0,a0,bombs_size  # Going to the next bomb's address                                  
            addi a2,a2,1            # Iterating counter by 1                                   
            bge a2,a1, END_BOMBS_OPERATIONS_LOOP # If all of the bombs were checked, end loop (don't attack)                                
            j BOMBS_OPERATIONS_LOOP # otherwise, go back to the loop's beginning 

    END_BOMBS_OPERATIONS_LOOP:
    # Procedure finished: Loading Registers from Stack
        lw ra,0(sp)
        addi sp,sp,4
    # End of Stack Operations   
        ret
